"Represents a schema"
schema {
  query: RootQueryType
  mutation: RootMutationType
  subscription: RootSubscriptionType
}

type PageInfo {
  "When paginating backwards, are there more items?"
  hasPreviousPage: Boolean!

  "When paginating forwards, are there more items?"
  hasNextPage: Boolean!

  "When paginating backwards, the cursor to continue."
  startCursor: String

  "When paginating forwards, the cursor to continue."
  endCursor: String
}

type ValidationOption {
  "The name of a variable to be subsituted in a validation message template"
  key: String!

  "The value of a variable to be substituted in a validation message template"
  value: String!
}

type PostEdge {
  node: Post
  cursor: String
}

type RootSubscriptionType {
  newComment(postId: ID!): Post!
}

type PostConnection {
  pageInfo: PageInfo!
  edges: [PostEdge]
}

interface Node {
  "The ID of the object."
  id: ID!
}

input CreatePostInput {
  content: String!
}

type Post implements Node {
  comments: [Post!]!

  "The ID of an object"
  id: ID!

  content: String!

  insertedAt: NaiveDateTime!

  replyTo: Post
}

input CreateCommentInput {
  content: String!
  replyId: ID!
}

type RootMutationType {
  createPost(input: CreatePostInput!): PostPayload!
  createComment(input: CreateCommentInput!): PostPayload!
}

type RootQueryType {
  listPosts(after: String, first: Int, before: String, last: Int): PostConnection
  post(id: ID!): Post
  node(
    "The ID of an object."
    id: ID!
  ): Node
  isHealthy: Boolean!
}

"""
The `Naive DateTime` scalar type represents a naive date and time without
timezone. The DateTime appears in a JSON response as an ISO8601 formatted
string.
"""
scalar NaiveDateTime

"""
Validation messages are returned when mutation input does not meet the requirements.
  While client-side validation is highly recommended to provide the best User Experience,
  All inputs will always be validated server-side.

  Some examples of validations are:

  * Username must be at least 10 characters
  * Email field does not contain an email address
  * Birth Date is required

  While GraphQL has support for required values, mutation data fields are always
  set to optional in our API. This allows 'required field' messages
  to be returned in the same manner as other validations. The only exceptions
  are id fields, which may be required to perform updates or deletes.
"""
type ValidationMessage {
  """
  The input field that the error applies to. The field can be used to
  identify which field the error message should be displayed next to in the
  presentation layer.

  If there are multiple errors to display for a field, multiple validation
  messages will be in the result.

  This field may be null in cases where an error cannot be applied to a specific field.
  """
  field: String

  """
  A friendly error message, appropriate for display to the end user.

  The message is interpolated to include the appropriate variables.

  Example: `Username must be at least 10 characters`

  This message may change without notice, so we do not recommend you match against the text.
  Instead, use the *code* field for matching.
  """
  message: String

  "A unique error code for the type of validation used."
  code: String!

  """
  A template used to generate the error message, with placeholders for option substiution.

  Example: `Username must be at least {count} characters`

  This message may change without notice, so we do not recommend you match against the text.
  Instead, use the *code* field for matching.
  """
  template: String

  "A list of substitutions to be applied to a validation message template"
  options: [ValidationOption]
}

type PostPayload {
  "Indicates if the mutation completed successfully or not."
  successful: Boolean!

  "A list of failed validations. May be blank or null if mutation succeeded."
  messages: [ValidationMessage]

  "The object created\/updated\/deleted by the mutation. May be null if mutation failed."
  result: Post
}
